// <auto-generated />
using System;
using Budgethold.Modules.Wallets.Infrastructure.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Budgethold.Modules.Wallets.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(WalletsWriteDbContext))]
    partial class WalletsWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("wallets")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.Categories.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Categories", "wallets");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.RepeatableTransactions.Entities.RepeatableTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<short>("Interval")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("StartsAt")
                        .HasColumnType("date");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WalletId");

                    b.ToTable("repeatableTransactions", "wallets");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.Transactions.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("RepeatableTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RepeatableTransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("transactions", "wallets");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.Wallets.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("wallets", "wallets");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.Categories.Entities.Category", b =>
                {
                    b.HasOne("Budgethold.Modules.Wallets.Domain.Wallets.Entities.Wallet", "Wallet")
                        .WithMany("Categories")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.RepeatableTransactions.Entities.RepeatableTransaction", b =>
                {
                    b.HasOne("Budgethold.Modules.Wallets.Domain.Categories.Entities.Category", "Category")
                        .WithMany("RepeatableTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budgethold.Modules.Wallets.Domain.Wallets.Entities.Wallet", "Wallet")
                        .WithMany("RepeatableTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Budgethold.Shared.Abstractions.Kernel.ValueObjects.Transactions.Amount", "Amount", b1 =>
                        {
                            b1.Property<Guid>("RepeatableTransactionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Value")
                                .HasPrecision(19, 4)
                                .HasColumnType("numeric(19,4)")
                                .HasColumnName("Amount");

                            b1.HasKey("RepeatableTransactionId");

                            b1.ToTable("repeatableTransactions", "wallets");

                            b1.WithOwner()
                                .HasForeignKey("RepeatableTransactionId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.Transactions.Entities.Transaction", b =>
                {
                    b.HasOne("Budgethold.Modules.Wallets.Domain.Categories.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Budgethold.Modules.Wallets.Domain.RepeatableTransactions.Entities.RepeatableTransaction", "RepeatableTransaction")
                        .WithMany("Transactions")
                        .HasForeignKey("RepeatableTransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Budgethold.Modules.Wallets.Domain.Wallets.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Budgethold.Shared.Abstractions.Kernel.ValueObjects.Transactions.Amount", "Amount", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("Value")
                                .HasPrecision(19, 4)
                                .HasColumnType("numeric(19,4)")
                                .HasColumnName("Amount");

                            b1.HasKey("TransactionId");

                            b1.ToTable("transactions", "wallets");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("RepeatableTransaction");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.Categories.Entities.Category", b =>
                {
                    b.Navigation("RepeatableTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.RepeatableTransactions.Entities.RepeatableTransaction", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Budgethold.Modules.Wallets.Domain.Wallets.Entities.Wallet", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("RepeatableTransactions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
